// Copyright (c) Tailscale Inc & AUTHORS
// SPDX-License-Identifier: BSD-3-Clause

// The tshello server demonstrates how to use Tailscale as a library.
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"golang.org/x/oauth2/clientcredentials"
	"tailscale.com/tsnet"
)

var (
	tsKey struct {
		Key string `json:"key"`
	}
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	// use tailscale oauth client
	var oauthConfig = &clientcredentials.Config{
		ClientID:     os.Getenv("OAUTH_CLIENT_ID"),
		ClientSecret: os.Getenv("OAUTH_CLIENT_SECRET"),
		TokenURL:     "https://api.tailscale.com/api/v2/oauth/token",
	}

	tailnet, ok := os.LookupEnv("TAILNET")
	if !ok {
		log.Fatalf("TAILNET env var not set")
	}

	// todo add tags first
	client := oauthConfig.Client(context.Background())
	reqBody := `{
		"capabilities": {
		  "devices": {
			"create": {
			  "reusable": false,
			  "ephemeral": true,
			  "preauthorized": false,
			  "tags": [ "tag:tailtodo" ]
			}
		  }
		},
		"expirySeconds": 86400
	  }`

	resp, err := client.Post(fmt.Sprintf("https://api.tailscale.com/api/v2/tailnet/%s/keys", tailnet), "application/json", strings.NewReader(reqBody))
	if err != nil {
		log.Fatalf("error getting keys: %v", err)
	}

	fmt.Println("response status:", resp.Status)

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("error reading response body: %v", err)
	}

	// convert body into tsKey struct
	err = json.Unmarshal(body, &tsKey)
	if err != nil {
		log.Fatalf("error unmarshalling response body: %v", err)
	}

	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s <url in tailnet>\n", filepath.Base(os.Args[0]))
		os.Exit(2)
	}
	flag.Parse()

	if flag.NArg() != 1 {
		flag.Usage()
	}
	tailnetURL := flag.Arg(0)

	s := tsnet.Server{
		AuthKey:  tsKey.Key,
		Hostname: "todo=client",
	}
	defer s.Close()

	go func() {
		if err := s.Start(); err != nil {
			log.Fatal(err)
		}
	}()

	time.Sleep(5 * time.Second)
	cli := s.HTTPClient()

	resp, err = cli.Get(tailnetURL)
	if err != nil {
		log.Fatal(err)
	}

	resp.Write(os.Stdout)
}
