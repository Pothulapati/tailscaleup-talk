package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/pothulapati/tailscale-talk/restapi"
	"github.com/pothulapati/tailscale-talk/restapi/operations"
	"golang.org/x/oauth2/clientcredentials"
	"tailscale.com/tsnet"
)

var (
	hostname = flag.String("hostname", "todo", "hostname for the tailnet")

	tsKey struct {
		Key string `json:"key"`
	}
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	// use tailscale oauth client
	var oauthConfig = &clientcredentials.Config{
		ClientID:     os.Getenv("OAUTH_CLIENT_ID"),
		ClientSecret: os.Getenv("OAUTH_CLIENT_SECRET"),
		TokenURL:     "https://api.tailscale.com/api/v2/oauth/token",
	}

	tailnet, ok := os.LookupEnv("TAILNET")
	if !ok {
		log.Fatalf("TAILNET env var not set")
	}

	// todo: add tags first
	client := oauthConfig.Client(context.Background())
	reqBody := `{
		"capabilities": {
		  "devices": {
			"create": {
			  "reusable": false,
			  "ephemeral": true,
			  "preauthorized": false,
			  "tags": [ "tag:tailtodo" ]
			}
		  }
		},
		"expirySeconds": 86400
	  }`

	resp, err := client.Post(fmt.Sprintf("https://api.tailscale.com/api/v2/tailnet/%s/keys", tailnet), "application/json", strings.NewReader(reqBody))
	if err != nil {
		log.Fatalf("error getting keys: %v", err)
	}

	fmt.Println(resp.Status)

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("error reading response body: %v", err)
	}

	fmt.Println(string(body))

	// convert body into tsKey struct
	err = json.Unmarshal(body, &tsKey)
	if err != nil {
		log.Fatalf("error unmarshalling response body: %v", err)
	}

	fmt.Printf("key: %s\n", tsKey.Key)

	log.Printf("response body: %s", body)

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewTodoListAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "A Todo list application"
	parser.LongDescription = "From the todo list tutorial on goswagger.io"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	s := &tsnet.Server{
		Hostname: *hostname,
		AuthKey:  tsKey.Key,
	}

	defer s.Close()

	ln, err := s.Listen("tcp", ":80")
	if err != nil {
		log.Fatal(err)
	}

	defer ln.Close()

	server.ConfigureAPI()

	// wrap OpenAI server into ln
	http.Serve(ln, server.GetHandler())
}
